{"ast":null,"code":"import _slicedToArray from \"/Users/chenting/Desktop/ctt/first/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/chenting/Desktop/ctt/first/src/App.js\";\nimport React, { Fragment, useState, createContext, useEffect } from 'react';\nimport './Counter';\nconst CountContext = createContext();\n\nfunction App() {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        count = _useState2[0],\n        setCount = _useState2[1];\n\n  useEffect(Counter(), []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, count), React.createElement(\"button\", {\n    onClick: () => {\n      setCount(count + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"\\u7D2F\\u52A0\"), React.createElement(CountContext.Provider, {\n    value: count,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(Counter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/chenting/Desktop/ctt/first/src/App.js"],"names":["React","Fragment","useState","createContext","useEffect","CountContext","App","count","setCount","Counter"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,aAApC,EAAmDC,SAAnD,QAAoE,OAApE;AAEA,OAAO,WAAP;AAEA,MAAMC,YAAY,GAAGF,aAAa,EAAlC;;AAIA,SAASG,GAAT,GAAe;AAAA,oBACaJ,QAAQ,CAAC,CAAD,CADrB;AAAA;AAAA,QACNK,KADM;AAAA,QACCC,QADD;;AAEbJ,EAAAA,SAAS,CAACK,OAAO,EAAR,EAAY,EAAZ,CAAT;AACA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,KAAJ,CADF,EAEE;AAAQ,IAAA,OAAO,EAAE,MAAM;AACrBC,MAAAA,QAAQ,CAACD,KAAK,GAAC,CAAP,CAAR;AACD,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAWE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEA,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArC,CAXF,CADF;AAeD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { Fragment, useState, createContext, useEffect } from 'react'\n\nimport './Counter'\n\nconst CountContext = createContext()\n\n\n\nfunction App() {\n  const [count, setCount] = useState(0)\n  useEffect(Counter(), [])\n  return (\n    <Fragment>\n      <p>{count}</p>\n      <button onClick={() => {\n        setCount(count+1)\n      }}>累加</button>\n      {\n        /* \n          这段代码就相当于把count变量允许跨层级实现传递和使用了（也就是实现了上下文），\n          当父组件的count变量发生变化时，子组件也会发生变化 \n        */\n      }\n      <CountContext.Provider value={count}><Counter></Counter></CountContext.Provider>\n    </Fragment>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}